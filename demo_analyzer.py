"""
Version de d√©monstration de l'analyseur sans d√©pendances ML
"""

import csv
import re
from collections import Counter, defaultdict
from pathlib import Path
import json

class SimpleClassifier:
    """Version simplifi√©e du classificateur bas√©e uniquement sur les mots-cl√©s"""
    
    def __init__(self):
        self.categories = {
            'SANTE_NATURELLE': {
                'name': 'üè• Sant√© Naturelle',
                'keywords': ['rem√®de', 'naturel', 'sant√©', 'nutrition', 'bien-√™tre', 'gu√©rir', 'soin', 'mal', 'douleur', 'm√©decin', 'science']
            },
            'SPORT_FITNESS': {
                'name': 'üí™ Sport & Fitness',
                'keywords': ['sport', 'fitness', 'exercice', 'musculation', 'entra√Ænement', 'cardio', 'perdre', 'poids', 'kg']
            },
            'BEAUTE_ANTIAGE': {
                'name': 'üå∏ Beaut√© Anti-√¢ge',
                'keywords': ['beaut√©', 'anti-√¢ge', 'peau', 'visage', 'rides', 'cosm√©tique', 'cr√®me', 's√©rum']
            },
            'SOCIETE_TENDANCES': {
                'name': 'üèõÔ∏è Soci√©t√© & Tendances',
                'keywords': ['soci√©t√©', 'tendance', 'comportement', 'social', '√©volution', 'nouveau', 'r√©volutionne', 'monde']
            },
            'VOYAGES_DECOUVERTES': {
                'name': 'üó∫Ô∏è Voyages & D√©couvertes',
                'keywords': ['voyage', 'destination', 'tourisme', 'd√©couverte', 'r√©gion', 'plage', 'vacances', 'ville']
            },
            'LIFESTYLE_BIENETRE': {
                'name': 'üåø Lifestyle & Bien-√™tre',
                'keywords': ['lifestyle', 'routine', 'habitude', 'bien-√™tre', 'vie', 'quotidien', 'matin', 'chang√©']
            },
            'CULTURE_PATRIMOINE': {
                'name': 'üé® Culture & Patrimoine',
                'keywords': ['culture', 'art', 'patrimoine', 'exposition', 'spectacle', 'mus√©e', 'artiste']
            },
            'PSYCHOLOGIE_MENTAL': {
                'name': 'üß† Psychologie & Mental',
                'keywords': ['psychologie', 'mental', '√©motion', 'comportement', 'stress', 'anxi√©t√©', 'psychologue']
            },
            'SENIOR_VIEILLISSEMENT': {
                'name': 'üë¥ Senior & Vieillissement',
                'keywords': ['senior', 'retraite', '√¢ge', 'vieillissement', '60+', 'pension']
            },
            'AUTOMOBILE_MOBILITE': {
                'name': 'üöó Automobile & Mobilit√©',
                'keywords': ['voiture', 'auto', 'conduite', 'v√©hicule', 'mobilit√©', '√©lectrique']
            },
            'FINANCE_INVESTISSEMENT': {
                'name': 'üí∞ Finance & Investissement',
                'keywords': ['finance', 'investissement', '√©pargne', 'argent', 'crypto', 'bitcoin', 'investir']
            },
            'RECETTES_CUISINE': {
                'name': 'üçΩÔ∏è Recettes & Cuisine',
                'keywords': ['recette', 'cuisine', 'plat', 'culinaire', 'food', 'ingr√©dient', 'repas', 'gratin', 'minutes']
            }
        }
    
    def classify(self, title):
        """Classifie un titre dans une cat√©gorie"""
        title_lower = title.lower()
        scores = {}
        
        for cat_key, cat_data in self.categories.items():
            score = sum(1 for keyword in cat_data['keywords'] if keyword in title_lower)
            scores[cat_key] = score
        
        # Trouver la cat√©gorie avec le meilleur score
        best_category = max(scores, key=scores.get)
        best_score = scores[best_category]
        
        # Calculer la confiance (basique)
        total_keywords = sum(scores.values())
        confidence = best_score / total_keywords if total_keywords > 0 else 0
        
        return {
            'category': self.categories[best_category]['name'],
            'confidence': confidence,
            'score': best_score
        }

class SimplePatternDetector:
    """D√©tecteur de patterns simplifi√©"""
    
    def detect_patterns(self, titles):
        """D√©tecte les patterns dans une liste de titres"""
        patterns = {
            'starts_with_number': [],
            'has_question': [],
            'has_colon': [],
            'has_urgency': [],
            'has_personal': []
        }
        
        for title in titles:
            # Pattern num√©rique au d√©but
            if re.match(r'^\d+', title):
                patterns['starts_with_number'].append(title)
            
            # Question
            if '?' in title or title.lower().startswith(('comment', 'pourquoi', 'quand')):
                patterns['has_question'].append(title)
            
            # Deux points
            if ':' in title:
                patterns['has_colon'].append(title)
            
            # Urgence
            if any(word in title.lower() for word in ['urgent', 'maintenant', 'vite', 'imm√©diat']):
                patterns['has_urgency'].append(title)
            
            # Personnel
            if any(word in title.lower() for word in ["j'ai", 'mon', 'ma', 'mes', 'je']):
                patterns['has_personal'].append(title)
        
        return patterns

def analyze_csv(file_path):
    """Analyse un fichier CSV de titres"""
    print(f"\nüìä Analyse du fichier : {file_path}")
    print("="*60)
    
    # Lire le CSV
    titles = []
    with open(file_path, 'r', encoding='utf-8') as f:
        reader = csv.DictReader(f)
        for row in reader:
            if 'Title' in row:
                titles.append(row['Title'])
    
    print(f"\n‚úì {len(titles)} titres charg√©s")
    
    # Classification
    classifier = SimpleClassifier()
    categories_count = defaultdict(int)
    classified_titles = []
    
    print("\nüè∑Ô∏è Classification des titres...")
    for title in titles:
        result = classifier.classify(title)
        categories_count[result['category']] += 1
        classified_titles.append({
            'title': title,
            'category': result['category'],
            'confidence': result['confidence']
        })
    
    # Afficher la distribution
    print("\nüìä Distribution par cat√©gorie :")
    for category, count in sorted(categories_count.items(), key=lambda x: x[1], reverse=True):
        percentage = (count / len(titles)) * 100
        print(f"  {category}: {count} ({percentage:.1f}%)")
    
    # D√©tection de patterns
    detector = SimplePatternDetector()
    patterns = detector.detect_patterns(titles)
    
    print("\nüîç Patterns d√©tect√©s :")
    for pattern_name, examples in patterns.items():
        if examples:
            print(f"\n  ‚Ä¢ {pattern_name}: {len(examples)} occurrences")
            print(f"    Exemple: {examples[0][:60]}...")
    
    # Statistiques g√©n√©rales
    lengths = [len(title) for title in titles]
    avg_length = sum(lengths) / len(lengths)
    
    print("\nüìà Statistiques g√©n√©rales :")
    print(f"  ‚Ä¢ Longueur moyenne: {avg_length:.1f} caract√®res")
    print(f"  ‚Ä¢ Longueur min/max: {min(lengths)} / {max(lengths)}")
    
    # Mots les plus fr√©quents
    all_words = []
    for title in titles:
        words = re.findall(r'\b\w+\b', title.lower())
        all_words.extend([w for w in words if len(w) > 3])
    
    word_counts = Counter(all_words)
    print("\nüìù Top 10 mots les plus fr√©quents :")
    for word, count in word_counts.most_common(10):
        print(f"  ‚Ä¢ {word}: {count}")
    
    # Sauvegarder les r√©sultats
    output_file = Path('exports/demo_results.json')
    output_file.parent.mkdir(exist_ok=True)
    
    results = {
        'total_titles': len(titles),
        'distribution': dict(categories_count),
        'patterns_count': {k: len(v) for k, v in patterns.items()},
        'avg_length': avg_length,
        'top_words': dict(word_counts.most_common(20))
    }
    
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(results, f, ensure_ascii=False, indent=2)
    
    print(f"\n‚úÖ R√©sultats sauvegard√©s dans : {output_file}")

if __name__ == "__main__":
    import sys
    
    # V√©rifier si un fichier est pass√© en argument
    if len(sys.argv) > 1:
        file_path = Path(sys.argv[1])
        if file_path.exists():
            analyze_csv(file_path)
        else:
            print(f"‚ùå Fichier non trouv√© : {file_path}")
    else:
        # Analyser le fichier exemple par d√©faut
        example_file = Path('data/exemple_titres.csv')
        if example_file.exists():
            analyze_csv(example_file)
        else:
            print("‚ùå Fichier exemple non trouv√©. Lancez d'abord test_simple.py")